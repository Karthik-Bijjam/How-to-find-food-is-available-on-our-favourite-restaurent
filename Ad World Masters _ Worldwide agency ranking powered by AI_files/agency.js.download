var handlerFilterAgencies = function() {
  var elem = document.getElementById('load-more-agencies');

  if (!elem || typeof elem =='undefined' || (elem.className.indexOf('hidden') > -1))
    return;

  if (isElementInViewport(elem))
  {
    filterAgencies('filter-form', false);
    elem.className = 'hidden';
  }
};

var handlerLoadReviews = function() {
  var elem = document.getElementById('load-more-reviews');

  if (!elem || typeof elem =='undefined' || (elem.className.indexOf('hidden') > -1))
    return;

  if (isElementInViewport(elem))
  {
    loadReviews(elem);
  }
};

var handlerLoadBlogPosts = function() {
  var elem = document.getElementById('load-more-posts');

  if (!elem || typeof elem =='undefined' || (elem.className.indexOf('hidden') > -1))
    return;

  if (isElementInViewport(elem))
  {
    loadBlogPosts(elem);
  }
};

if (window.addEventListener) {
  addEventListener('scroll', handlerFilterAgencies, false);
  addEventListener('scroll', handlerLoadReviews, false);
  addEventListener('scroll', handlerLoadBlogPosts, false);
  addEventListener('scroll', handlerScrollWidget,false);
} else if (window.attachEvent)  {
  attachEvent('onscroll', handlerFilterAgencies);
  attachEvent('onscroll', handlerLoadReviews);
  attachEvent('onscroll', handlerLoadBlogPosts);
  attachEvent('onscroll', handlerScrollWidget);
}

window.onload = function() {
  handlerFilterAgencies();
  initialHorizontalList('hlist-social-media', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-social-media-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-certifications', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-certifications-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-memberships', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-memberships-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
}
window.onresize = function() {
  initialHorizontalList('hlist-social-media', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-social-media-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-certifications', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-certifications-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-memberships', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
  initialHorizontalList('hlist-memberships-mobile', 'hlist-items', 'hlist-single-item','hlist-scroll-left','hlist-scroll-right');
}
var selectedCountries = [];

function toggleErrorField(elem,bShow)
{
  if (!elem || typeof elem == "undefined") { return false;}
  if (bShow)
  {
    if (elem.parentNode.className.indexOf('has-error') === -1)
    {
      elem.parentNode.className += ' has-error';
    }
  }
  else
  {
    if (elem.parentNode.className.indexOf('has-error') !== -1)
    {
      elem.parentNode.className = elem.parentNode.className.replace(/\s*has-error/g,'');
    }
  }
}

function addAnotherLocation(index, btnElem, iDictCountries)
{
  var parent = document.getElementById('localization-wrapper');
  if (!parent || typeof parent == 'undefined') {return;}
  if (btnElem)
  {
    btnElem.parentNode.removeChild(btnElem);
  }
  var sHTML = '<div id="localization-item-'+index+'" class="localization-item">';
  sHTML += '<div class="row"><input type="text" id="localization_'+index+'_search" placeholder="Search with Google" title="Search with Google" value=""/></div>';
  sHTML += '<div class="row with-search"><input type="hidden" id="localization_'+index+'_country_id" name="localization['+index+'][country_id]" value="0" /><input type="text" id="localization_'+index+'_country_name" placeholder="Country" title="Country" name="localization['+index+'][country_name]" value="" onBlur="validateAgencyField(2,this,\'localization_'+index+'_country_name\',false,0,\'\',\'\');" onKeyUp="searchDictToInput(event, this, \'localization_'+index+'_country_id\','+iDictCountries+')"/><div class="search-tip"></div><div class="msg-error">country is invalid</div></div>';
  sHTML += '<div class="row"><input type="text" id="localization_'+index+'_city" placeholder="City" title="City" name="localization['+index+'][city]" value="" onBlur="validateAgencyField(2,this,\'localization_'+index+'_city\',false,0,\'\',\'\');"/><div class="msg-error">city is invalid</div></div>';
  sHTML += '<div class="row"><input type="text" id="localization_'+index+'_address" placeholder="Address" title="Address" name="localization['+index+'][address]" value="" onBlur="validateAgencyField(2,this,\'localization_'+index+'_address\',false,0,\'\',\'\');"/><div class="msg-error">address is invalid</div></div>';
  sHTML += '<div class="row"><input type="text" id="localization_'+index+'_phone" placeholder="Phone number" title="Phone number" name="localization['+index+'][phone]" value="" onBlur="validateAgencyField(2,this,\'localization_'+index+'_phone\',false,0,\'\',\'\');"/><div class="msg-error">phone is invalid</div></div>';
  sHTML += '</div>';
  sHTML += '<button class="ico-minus" onClick="deleteElement(\'localization-item-'+index+'\', this)">Delete this location</button>';
  sHTML += '<button class="ico-plus" onClick="addAnotherLocation('+(index+1)+', this,'+iDictCountries+')">Add another location</button>';
  parent.insertAdjacentHTML("beforeEnd",sHTML);
  initAutoComplete(index, 'localization_'+index+'_search');
}

function showLocalization(elem, elemWrapperId)
{
  if (!elem || typeof elem == 'undefined') {return;}
  var elemWrapper = document.getElementById(elemWrapperId);
  if (!elemWrapper || typeof elemWrapper == 'undefined') {return;}
  if (elemWrapper.style.display != "block")
  {
    if (elem.className.indexOf('open') === -1)
    {
      elem.className += ' open';
    }
    elemWrapper.style.display = "block";
  }
  else
  {
    if (elem.className.indexOf('open') !== -1)
    {
      elem.className = elem.className.replace(/\s*open/g,'');
    }
    elemWrapper.style.display = "none";
  }
}

var arSuggestCategoryIndex = new Array();

function copyToButton(searchTipElem, searchInputId,sCategoryPrefix,sNameAttr,checkedWrapperId,uncheckedWrapperId,idCat,sCatVal)
{
  var checkedWrapper   = document.getElementById(checkedWrapperId);
  var uncheckedWrapper = document.getElementById(uncheckedWrapperId);
  var searchInput      = document.getElementById(searchInputId);
  if (!searchInput || typeof searchInput == "undefined" || !checkedWrapper || typeof checkedWrapper == "undefined") { console.log('undefined'); return; }

  //check if already not selected
  var bAlreadySelected = false;
  var arTmpInputs = checkedWrapper.getElementsByTagName('input');
  if (arTmpInputs)
  {
    var sTmpUpperCatVal = sCatVal.toUpperCase;
    for(var i = 0; i < arTmpInputs.length; i++)
    {
      if(arTmpInputs[i].type.toLowerCase() == 'checkbox')
      {
        if ((arTmpInputs[i].id == sCategoryPrefix+'_'+idCat)
            || (arTmpInputs[i].value.toUpperCase() == sTmpUpperCatVal))
        {
          //already selected, don't do anything
          bAlreadySelected = true;
          break;
        }
      }
    }
  }

  //check if in suggested
  if (uncheckedWrapper && typeof uncheckedWrapper != "undefined")
  {
    var arTmpInputs = uncheckedWrapper.getElementsByTagName('input');
    if (arTmpInputs)
    {
      var sTmpUpperCatVal = sCatVal.toUpperCase;
      for(var i = 0; i < arTmpInputs.length; i++)
      {
        if(arTmpInputs[i].type.toLowerCase() == 'checkbox')
        {
          if ((arTmpInputs[i].id == sCategoryPrefix+'_'+idCat)
              || (arTmpInputs[i].value.toUpperCase() == sTmpUpperCatVal))
          {
            //found - remove it from suggested
            arTmpInputs[i].parentNode.parentNode.removeChild(arTmpInputs[i].parentNode);
            break;
          }
        }
      }
    }
  }

  if (!bAlreadySelected)
  {
    var sHTML = '<div class="checkbox-button"><input type="checkbox" checked="checked" id="'+sCategoryPrefix+'_'+idCat+'" name="'+sNameAttr+'[]" value="'+idCat+'" onchange="toggleItemSelection(this,\''+checkedWrapperId+'\',\''+uncheckedWrapperId+'\');"><label for="'+sCategoryPrefix+'_'+idCat+'">'+sCatVal+'</label></div>';
    //console.log('HTML: '+sHTML);
    checkedWrapper.insertAdjacentHTML('beforeEnd',sHTML);
  }
  //clear input
  searchInput.value = '';
  if (searchTipElem && typeof searchTipElem != "undefined")
  {
    searchTipElem.innerHTML = '';
    searchTipElem.style.display = 'none';
  }
}

function handleAjaxErr(jqXHR, exception) {
  //console.log(jqXHR);
  //console.log(exception);
  if (jqXHR.status === 0) {
      alert('Not connect.\n Verify Network.');
  } else if (jqXHR.status == 404) {
      alert('Requested page not found. [404]');
  } else if (jqXHR.status == 500) {
      alert('Internal Server Error [500].');
  } else if (exception === 'parsererror') {
      alert('Requested JSON parse failed.');
  } else if (exception === 'timeout') {
      alert('Time out error.');
  } else if (exception === 'abort') {
      alert('Ajax request aborted.');
  } else {
      alert('Uncaught Error.\n' + jqXHR.responseText);
  }
}

function getRelatedSkills(categoryId) {
  //add general skills
  var categories = [-1, categoryId];
  getRelatedCategories(categories, function(response)
  {
    if (response && response.type === 'success' && response.data.length > 0) {
      var cats = response.data;
      jQuery('#suggested-skills-wrapper').empty();

      for(var i=0; i<cats.length; i++) {
        var item = cats[i];
        var htmlItem = '<div class="checkbox-button"><input type="checkbox" id="skill_'
          + item['id'] + '" name="skills[]" value="'
          + item['id'] + '" onchange="toggleItemSelection(this,\'selected-skills-wrapper\',\'suggested-skills-wrapper\');"><label for="skill_'
          + item['id'] + '">'
          + item['name'] + '</label></div>';

        jQuery('#suggested-skills-wrapper').append(htmlItem);
      }
    } else {
      jQuery('#suggested-skills-wrapper').append('No suggested skills found');
    }
  });
}

function getRelatedCategories(categoryId, onSuccess) {
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'get_related_categories', categoryId: categoryId},
    success: onSuccess,
    error: handleAjaxErr
  });
}

function addAgencyClicks(iAgencyId, iClickType, iClickCat, sCounterClass) {
  if (!iClickType || typeof iClickType == "undefined") { return; }
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'add_agency_click', agency_id:iAgencyId, click_type: iClickType, click_cat: iClickCat},
    success: function(response)
    {
      if (response && response.type == "success")
      {
        if (sCounterClass && typeof sCounterClass != "undefined")
        {
          var arElems = document.getElementsByClassName(sCounterClass);
          if (arElems && arElems.length > 0)
          {
            for (var i=0; i<arElems.length; i++)
            {
              var iTmpVal = arElems[i].innerHTML;
              if (isNaN(iTmpVal)) { continue; }
              arElems[i].innerHTML = parseInt(iTmpVal,10) + 1;
            }
          }
        }
      }
    },
    error: handleAjaxErr
  });
}

function getRelatedLanguages(categoryId) {
  getRelatedCategories(categoryId, function(response)
  {
    if (response && response.type === 'success' && response.data.length > 0) {
      console.log(response);
      var cats = response.data;
      jQuery('#suggested-languages-wrapper').empty();
      selectedLangs = jQuery('#selected-languages-wrapper input').map(function(i,v) {
                          return jQuery(this).val();
                      }).toArray();

      for(var i=0; i<cats.length; i++) {
        var item = cats[i];
        if (selectedLangs.indexOf(item['id']) < 0) {
          var htmlItem = '<div class="checkbox-button"><input type="checkbox" id="language_'
            + item['id'] + '" name="languages[]" value="'
            + item['id'] + '" onchange="toggleItemSelection(this,\'selected-languages-wrapper\',\'suggested-languages-wrapper\');"><label for="language_'
            + item['id'] + '">'
            + item['name'] + '</label></div>';

          jQuery('#suggested-languages-wrapper').append(htmlItem);
        }
      }
    } else {
      jQuery('#suggested-languages-wrapper').append('No suggested languages found');
    }
  });
}

function toggleCountry(elem,checkedWrapperId,uncheckedWrapperId) {
  toggleItemSelection(elem,checkedWrapperId,uncheckedWrapperId);

  if (elem.checked) {
    selectedCountries.push(elem.value);
  } else {
    var index = selectedCountries.indexOf(elem.value);
    if (index > -1) {
      selectedCountries.splice(index, 1);
    }
  }
  getRelatedLanguages(selectedCountries);
}

function addCountryFromList(iSelCountry)
{
  selectedCountries.push(iSelCountry);
  getRelatedLanguages(selectedCountries);
}

function submitToButton(e, inputElem, sCategoryPrefix, sNameAttr, checkedWrapperId, uncheckedWrapperId)
{
  if(e.which == 13 || e.keyCode == 13)
  {
    e.preventDefault();
    copyToButton(null,inputElem.id,sCategoryPrefix,sNameAttr,checkedWrapperId,uncheckedWrapperId,inputElem.value,inputElem.value);
  }
}

function searchDictToButton(e, inputElem, iSearchType, sCategoryPrefix, sNameAttr, checkedWrapperId, uncheckedWrapperId)
{
  if(e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) { return true; }
  var bIsSubmitting = false;
  if(e.which == 13 || e.keyCode == 13)
  {
    e.preventDefault();
    bIsSubmitting = true;
  }

  var searchTipElem = getChild(inputElem.parentNode,'search-tip');
  if (!searchTipElem) {return true;}
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'search_dict', section: 'agency', search_type: iSearchType, search_val: inputElem.value},
    success: function(response)
    {
      if (response)
      {
        if (bIsSubmitting)
        {
          //enter pressed
          if (response.type == "success" && response.result.length == 1 && response.result[0].val == inputElem.value)
          {
            //found match
            copyToButton(null,inputElem.id,sCategoryPrefix,sNameAttr,checkedWrapperId,uncheckedWrapperId,parseInt(response.result[0].id),response.result[0].val);
          }
          else if (inputElem.value.trim() != '')
          {
            //new suggestion
            //if (typeof arSuggestCategoryIndex[sCategoryPrefix] == "undefined") { arSuggestCategoryIndex[sCategoryPrefix] = 1; }
            copyToButton(null,inputElem.id,'temp_'+sCategoryPrefix,'temp_'+sNameAttr,checkedWrapperId,uncheckedWrapperId,inputElem.value,inputElem.value);
            //arSuggestCategoryIndex[sCategoryPrefix]++;
          }
          searchTipElem.innerHTML = '';
          searchTipElem.style.display = 'none';
        }
        else
        {
          //search tip
          if(response.type == "success")
          {
            var sHTML = '';
            for (var i=0; i<response.result.length; i++)
            {
              var sOnClick = '';
              if (sCategoryPrefix == 'country')
                sOnClick = 'addCountryFromList('+parseInt(response.result[i].id)+');';
              sHTML += '<li onClick="copyToButton(this.parentNode.parentNode,\''+inputElem.id+'\',\''+sCategoryPrefix+'\', \''+sNameAttr+'\', \''+checkedWrapperId+'\', \''+uncheckedWrapperId+'\', '+parseInt(response.result[i].id)+', \''+response.result[i].val+'\');'+sOnClick+'">'+response.result[i].val+'</li>';
            }
            if (sHTML != '')
            {
              searchTipElem.innerHTML = '<ul>'+sHTML+'</ul><div class="click-mask" onClick="hideParent(event,this)"></div>';
              searchTipElem.style.display = 'inline-block';
            }
            else
            {
              searchTipElem.innerHTML = '';
              searchTipElem.style.display = 'none';
            }
          }
          else
          {
            searchTipElem.innerHTML = '';
            searchTipElem.style.display = 'none';
          }
        }
      }
      else
      {
        searchTipElem.innerHTML = '';
        searchTipElem.style.display = 'none';
      }
    },
    error: handleAjaxErr
  });
  if (bIsSubmitting)
  {
    return false;
  }
}

function setSelectedOwner(sInputElemId, sFirstName, sLastName, sUserLogin, sElemUserId, iUserId)
{
  var inputElem  = document.getElementById(sInputElemId);
  var elemUserId = document.getElementById(sElemUserId);
  if (!inputElem || typeof inputElem == "undefined"
      || !elemUserId || typeof elemUserId == "undefined")
  { return; }
  //format name
  var sName = sFirstName+' '+sLastName+' ('+sUserLogin+')';
  inputElem.value = sName;
  elemUserId.value = iUserId;

  var searchTipElem = getChild(inputElem.parentNode,'search-tip');
  if (searchTipElem && typeof searchTipElem != "undefined")
  {
    searchTipElem.innerHTML = '';
    searchTipElem.style.display = 'none';
  }
}

function searchUsers(e,inputElem,sElemUserId,sRole)
{
  if(inputElem.readOnly || e.shiftKey || e.altKey || e.ctrlKey || e.metaKey) { return true; }
  if(e.which == 13 || e.keyCode == 13)
  {
    e.preventDefault();
    return true;
  }

  var searchTipElem = getChild(inputElem.parentNode,'search-tip');
  if (!searchTipElem) {return true;}
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'search_users', search_val: inputElem.value, search_role: sRole},
    success: function(response)
    {
      if (response)
      {
        //search tip
        if(response.type == "success")
        {

          var sHTML = '';
          for (var i=0; i<response.users_list.length; i++)
          {
            sHTML += '<li onClick="setSelectedOwner(\''+inputElem.id+'\',\''+response.users_list[i].first_name+'\',\''+response.users_list[i].last_name+'\',\''+response.users_list[i].user_login+'\',\''+sElemUserId+'\',\''+response.users_list[i].id+'\')">'+(response.users_list[i].first_name+' '+response.users_list[i].last_name+' ('+response.users_list[i].user_login).trim()+')</li>';
          }
          if (sHTML != '')
          {
            searchTipElem.innerHTML = '<ul>'+sHTML+'</ul><div class="click-mask" onClick="hideParent(event,this)"></div>';
            searchTipElem.style.display = 'inline-block';
          }
          else
          {
            searchTipElem.innerHTML = '';
            searchTipElem.style.display = 'none';
          }
        }
        else
        {
          searchTipElem.innerHTML = '';
          searchTipElem.style.display = 'none';
        }
      }
      else
      {
        searchTipElem.innerHTML = '';
        searchTipElem.style.display = 'none';
      }
    },
    error: handleAjaxErr
  });
}

function toggleItemSelection(elem,checkedWrapperId,uncheckedWrapperId)
{
  var checkedWrapper   = document.getElementById(checkedWrapperId);
  var uncheckedWrapper = document.getElementById(uncheckedWrapperId);
  if (!elem || typeof elem == "undefined" || !checkedWrapper || typeof checkedWrapper == "undefined" || !uncheckedWrapper || typeof uncheckedWrapper == "undefined") { return; }

  if (elem.checked)
  {
    checkedWrapper.insertAdjacentElement('beforeEnd',elem.parentNode);
  }
  else
  {
    uncheckedWrapper.insertAdjacentElement('beforeEnd',elem.parentNode);
  }
}

function toggleElemByRadio(elem,targetElemId)
{
  var targetElem = document.getElementById(targetElemId);
  if (!elem || typeof elem == "undefined" || !targetElem || typeof targetElem == "undefined") { return; }
  if (elem.value == 1)
  {
    targetElem.style.display = 'block';
  }
  else
  {
    targetElem.style.display = 'none';
  }
}

function toggleAdditionalField(elem,targetWrapperId)
{
  var targetWrapper = document.getElementById(targetWrapperId);
  if (!elem || typeof elem == "undefined" || !targetWrapper || typeof targetWrapper == "undefined") { return; }

  if (elem.checked)
  {
    targetWrapper.style.display="block";
  }
  else
  {
    var arInputs = targetWrapper.getElementsByClassName('with-icon');
    if (arInputs && typeof arInputs.length != "undefined" && arInputs.length>0 )
    {
      //reset value for input
      arInputs[0].value = '';
    }
    targetWrapper.style.display="none";
  }
}

function toggleAwardsShortList(sType)
{
  var elemPrizes    = null;
  var elemMentions  = null;
  var elemShortList = null;
  if (sType == 'INT')
  {
    elemPrizes    = document.getElementById("awards-int-prizes");
    elemMentions  = document.getElementById("awards-int-mentions");
    elemShortList = document.getElementById("awards-int-shortlist-wrapper");
  }
  else
  {
    elemPrizes    = document.getElementById("awards-nat-prizes");
    elemMentions  = document.getElementById("awards-nat-mentions");
    elemShortList = document.getElementById("awards-nat-shortlist-wrapper");
  }

  if ((!elemPrizes || typeof elemPrizes == "undefined")
      || (!elemMentions || typeof elemMentions == "undefined")
      || (!elemShortList || typeof elemShortList == "undefined"))
  {
    return;
  }
  if ((elemPrizes.value.trim() === "0")
      && (elemMentions.value.trim() === "0"))
  {
    if (elemShortList.className.indexOf('hidden') !== -1)
    {
      elemShortList.className = elemShortList.className.replace(/\s*hidden/g,'');
      var arTmpInputs = elemShortList.getElementsByTagName('input');
      if (arTmpInputs)
      {
        for(var i = 0; i < arTmpInputs.length; i++)
        {
          if(arTmpInputs[i].type.toLowerCase() == 'text')
          {
            arTmpInputs[i].focus();
            break;
          }
        }
      }
    }
  }
  else
  {
    if (elemShortList.className.indexOf('hidden') === -1)
    {
      elemShortList.className += ' hidden';
    }
  }
}

function addAnotherProject(index, btnElem, sDefaultImg,iAgencyId,sImgPrefix,sTemplatePath,iImgOptimalWidth,iImgOptimalHeight)
{
  var parent = document.getElementById('projects-wrapper');
  if (!parent || typeof parent == 'undefined') {return;}
  if (btnElem)
  {
    btnElem.parentNode.removeChild(btnElem);
  }
  var sHTML = '<div id="project-item-'+index+'" class="project-item">';
  sHTML += '<div class="row"><input type="hidden" id="project_'+index+'_id" name="project['+index+'][id]" value="0" /><input type="text" id="project_'+index+'_name" placeholder="Project name" title="Project name" name="project['+index+'][name]" value="" onblur="validateAgencyField(6,this,\'project_'+index+'_name\',false,0,\'\',\'\');" /><div class="msg-error">name is required</div></div>';
  sHTML += '<div class="row"><input type="text" id="project_'+index+'_year" placeholder="Year" title="Year" name="project['+index+'][year]" value="" onblur="validateAgencyField(6,this,\'project_'+index+'_year\',false,0,\'\',\'\');" /><div class="msg-error">year is invalid</div></div>';
  sHTML += '<div class="row"><input type="text" id="project_'+index+'_case_url" placeholder="Link to the case study" title="Link to the case study" name="project['+index+'][case_url]" value="" onblur="validateAgencyField(6,this,\'project_'+index+'_case_url\',false,0,\'\',\'\');" /><div class="msg-error">URL is invalid</div></div>';
  sHTML += '<div class="row"><input type="hidden" id="project-'+index+'-img-name" name="project['+index+'][img]" value=""><div class="image-cell"><span class="align-helper"></span><img id="project-'+index+'-img" src="'+sDefaultImg+'"><div class="loading hidden"><span class="align-helper"></span><!-- LOADER START--><div class="loader"></div><!-- LOADER END--></div></div>';
  sHTML += '<div class="upload-btn-wrapper"><input type="file" name="project['+index+'][upl-img]" value="Upload thumbnail" id="project-'+index+'-upl-img" class="css-upload" onChange="fileSelected(event, this, \'project-'+index+'-img\'); validateAgencyField(6,this,\'project\',true,'+iAgencyId+',0,\'project-'+index+'-img\',\'project-'+index+'-img-name\',\''+sImgPrefix+'\');" accept="image/gif, image/jpeg, image/png"/>';
  sHTML += '<label for="project-'+index+'-upl-img" class="css-upload-label"><span class="css-upload-output"></span><span class="css-upload-button">Upload thumbnail</span></label><div class="msg-error"></div>';
  sHTML += '<div class="info-cell"><span>Optimal size is '+iImgOptimalWidth+'px x '+iImgOptimalHeight+'px</span></div>';
  sHTML += '</div></div></div>';
  sHTML += '<button class="ico-minus" onClick="deleteElement(\'project-item-'+index+'\', this)">Delete this project</button>';
  sHTML += '<button class="ico-plus" onClick="addAnotherProject('+(index+1)+', this, \''+sDefaultImg+'\','+iAgencyId+',\''+sImgPrefix+'\',\''+sTemplatePath+'\','+iImgOptimalWidth+','+iImgOptimalHeight+')">Add another project</button>';
  parent.insertAdjacentHTML("beforeEnd",sHTML);
}

function addAnotherNetwork(index, btnElem, iDictNetworks)
{
  var parent = document.getElementById('networks-wrapper');
  if (!parent || typeof parent == 'undefined') {return;}
  if (btnElem)
  {
    btnElem.parentNode.removeChild(btnElem);
  }
  var sHTML = '<div id="network-item-'+index+'" class="network-item">';
  sHTML += '<div class="row with-search"><input type="hidden" id="networks_'+index+'_id" name="networks['+index+'][id]" value="0" /><input type="text" id="network_'+index+'_name" placeholder="Network name" title="Network name" name="networks['+index+'][name]" value="" onKeyUp="searchDictToInput(event, this, \'networks_'+index+'_id\','+iDictNetworks+')" onblur="validateAgencyField(3,this,\'networks_'+index+'_name\',false,0,0,\'\',\'\',\'\');" /><div class="search-tip"></div><div class="msg-error">name is required</div></div>';
  sHTML += '</div>';
  sHTML += '<button class="ico-minus" onClick="deleteElement(\'network-item-'+index+'\', this)">Delete this network</button>';
  sHTML += '<button class="ico-plus" onClick="addAnotherNetwork('+(index+1)+', this, '+iDictNetworks+')">Add network</button>';
  parent.insertAdjacentHTML("beforeEnd",sHTML);
}

function addAnotherCertificate(index, btnElem, iDictCertificates)
{
  var parent = document.getElementById('certificates-wrapper');
  if (!parent || typeof parent == 'undefined') {return;}
  if (btnElem)
  {
    btnElem.parentNode.removeChild(btnElem);
  }
  var sHTML = '<div id="certificate-item-'+index+'" class="certificate-item">';
  sHTML += '<div class="row with-search"><input type="hidden" id="certificate_'+index+'_cid" name="certificate['+index+'][cid]" value="0" /><input type="text" id="certificate_'+index+'_name" placeholder="Certification name" title="Certification name" name="certificate['+index+'][name]" value="" onKeyUp="searchDictToInput(event, this, \'certificate_'+index+'_cid\','+iDictCertificates+')" onblur="validateAgencyField(8,this,\'certificate_'+index+'_name\',false,0,0,\'\',\'\',\'\');" /><div class="search-tip"></div><div class="msg-error">name is required</div></div>';
  sHTML += '<div class="row"><input type="text" id="certificate_'+index+'_url" placeholder="Enter link for verification" title="Enter link for verification" name="certificate['+index+'][url]" value=""  onblur="validateAgencyField(8,this,\'certificate_'+index+'_url\',false,0,0,\'\',\'\',\'\');"/><div class="msg-error">URL is invalid</div></div>';
  sHTML += '</div>';
  sHTML += '<button class="ico-minus" onClick="deleteElement(\'certificate-item-'+index+'\', this)">Delete this certification</button>';
  sHTML += '<button class="ico-plus" onClick="addAnotherCertificate('+(index+1)+', this, '+iDictCertificates+')">Add certification</button>';
  parent.insertAdjacentHTML("beforeEnd",sHTML);
}

function addAnotherMembership(index, btnElem, iDictMemberships)
{
  var parent = document.getElementById('memberships-wrapper');
  if (!parent || typeof parent == 'undefined') {return;}
  if (btnElem)
  {
    btnElem.parentNode.removeChild(btnElem);
  }
  var sHTML = '<div id="membership-item-'+index+'" class="membership-item">';
  sHTML += '<div class="row with-search"><input type="hidden" id="membership_'+index+'_cid" name="membership['+index+'][cid]" value="0" /><input type="text" id="membership_'+index+'_name" placeholder="Association name" title="Association name" name="membership['+index+'][name]" value="" onKeyUp="searchDictToInput(event, this, \'membership_'+index+'_cid\','+iDictMemberships+')" onblur="validateAgencyField(8,this,\'membership_'+index+'_name\',false,0,0,\'\',\'\',\'\');"/><div class="search-tip"></div><div class="msg-error">name is required</div></div>';
  sHTML += '<div class="row"><input type="text" id="membership_'+index+'_url" placeholder="Enter link for verification" title="Enter link for verification" name="membership['+index+'][url]" value="" onblur="validateAgencyField(8,this,\'membership_'+index+'_url\',false,0,0,\'\',\'\',\'\');"/><div class="msg-error">URL is invalid</div></div>';
  sHTML += '</div>';
  sHTML += '<button class="ico-minus" onClick="deleteElement(\'membership-item-'+index+'\', this)">Delete this membership</button>';
  sHTML += '<button class="ico-plus" onClick="addAnotherMembership('+(index+1)+', this, '+iDictMemberships+')">Add membership</button>';
  parent.insertAdjacentHTML("beforeEnd",sHTML);
}

function toggleUserAsContact(bFill, sEmail, sFirstName, sLastName)
{
  var elemContactEmail = document.getElementById('contact_email');
  var elemContactFName = document.getElementById('contact_fname');
  var elemContactLName = document.getElementById('contact_lname');
  var elemContactPosition = document.getElementById('contact_position');
  var elemInvitationWrapper = document.getElementById('invitation_profile_manager_wrapper');
  var elemNotInvite = document.getElementById('not_invite_profile_manager');

  if (!elemContactEmail || typeof elemContactEmail == "undefined"
      || !elemContactFName || typeof elemContactFName == "undefined"
      || !elemContactLName || typeof elemContactLName == "undefined"
      || !elemContactPosition || typeof elemContactPosition == "undefined")
  {
    return;
  }

  if (bFill)
  {
    elemContactEmail.value = sEmail;
    elemContactFName.value = sFirstName;
    elemContactLName.value = sLastName;

    elemContactPosition.value = '';
    elemInvitationWrapper.style.display = 'none';
    elemNotInvite.checked = true;
  }
  else
  {
    elemContactEmail.value = '';
    elemContactFName.value = '';
    elemContactLName.value = '';
    elemContactPosition.value = '';
    elemInvitationWrapper.style.display = 'block';
  }
}

function toggleLoadingMask(bShow)
{
  var loadingMask = document.getElementById('loading-mask');
  if (!loadingMask || typeof loadingMask == "undefined") { return; }
  if (bShow)
  {
    loadingMask.style.display = 'block';
  }
  else
  {
    loadingMask.style.display = 'none';
  }
}

function searchAgencies(idAgenciesList, bOnlyAgenciesOfTheMonth, sClassAgenciesOfTheMonth, sSearchVal, arSearchSpecialities, arSearchCats, sAdsIds, bIncludeRemoteCountries)
{
  var agenciesList = document.getElementById(idAgenciesList);
  if (!agenciesList) { console.log('no results container'); return; }
  var arAgenciesOfTheMonth = null;
  if (!bOnlyAgenciesOfTheMonth)
    arAgenciesOfTheMonth = document.getElementsByClassName(sClassAgenciesOfTheMonth);

  //convert it to 0
  if (!bIncludeRemoteCountries)
    bIncludeRemoteCountries = 0;

  toggleLoadingMask(true);
  toggleHidden('agencies-skeleton');

  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'search_agencies', agencies_otm: bOnlyAgenciesOfTheMonth, search_cats: arSearchCats, search_specialities: arSearchSpecialities, search_val: sSearchVal, search_page: iAgenciesPage, ads_ids: sAdsIds, remote_countries: bIncludeRemoteCountries},
    success: function(response)
    {
      if(response && response.type == "success")
      {
        var loadMore = document.getElementById('load-more-agencies');
        toggleHidden('agencies-skeleton');

        //load result list
        if (response.agencies_list)
        {
          var sHTML = '';
          for (var i=0; i<response.agencies_list.length; i++)
          {
            sHTML += '<div class="agency-item">';
              sHTML += '<div class="agency-logo" style="background-image: url(\''+response.agencies_list[i].logo+'\')" alt="'+response.agencies_list[i].alt+'" title="'+response.agencies_list[i].alt+'"><a href="'+response.agencies_list[i].view_url+'"></a></div>';
              sHTML += '<div class="agency-info">';
                sHTML += '<div class="agency-row">';
                  sHTML += '<div class="agency-left-cell">';
                    sHTML += '<div class="agency-name"><a href="'+response.agencies_list[i].view_url+'">'+response.agencies_list[i].name+'</a></div>';
                    sHTML += '<div class="agency-speciality">';
                    if (response.agencies_list[i].speciality)
                    {
                      sHTML += response.agencies_list[i].speciality;
                    }
                    else
                    {
                      sHTML += '&nbsp;';
                    }
                    sHTML += '</div>';
                  sHTML += '</div>';
                  sHTML += '<div class="agency-right-cell">';
                    sHTML += '<div class="agency-detail agency-city">';
                      if (response.agencies_list[i].adr_count > 1) sHTML += 'Multiple'; else sHTML += response.agencies_list[i].city;
                    sHTML += '</div>';
                    sHTML += '<div class="agency-detail agency-size">'+response.agencies_list[i].company_size+'</div>';
                    sHTML += '<div class="agency-detail agency-budget">'+response.agencies_list[i].budget+'</div>';
                    sHTML += '<div class="agency-detail agency-founded">'+response.agencies_list[i].founded_year+'</div>';
                  sHTML += '</div>';
                sHTML += '</div>';
                sHTML += '<div class="agency-row">';
                  sHTML += '<div class="agency-decription">';
                  if (response.agencies_list[i].description != '') { sHTML += '<span>'+response.agencies_list[i].description+'...</span> '; }
                  sHTML += '<a href="'+response.agencies_list[i].view_url+'">See more</a></div>';
                sHTML += '</div>';
              sHTML += '</div>';
              if (!bOnlyAgenciesOfTheMonth && response.agencies_list[i].campaign_id)
              {
                sHTML += '<div class="agency-score confetti-button featured"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><div class="align-helper"></div><div class="img-wrapper"><div class="img-with-label"><img src="'+response.agencies_list[i].campaign_img+'" align="top"><br>Featured</div></div></div>';
              }
              else
              {
                if (response.agencies_list[i].score == 0)
                {
                  sHTML += '<div class="agency-score with-img"><div class="align-helper"></div><div class="img-wrapper"><img src="'+response.agencies_list[i].img_pending+'" alt="score pending" align="top" class="pending"></div></div>';
                }
                else
                {
                  sHTML += '<div class="agency-score confetti-button ';
                  if (response.agencies_list[i].score >= 5)
                    sHTML += 'score-'+response.agencies_list[i].score.toString().replace('.','_');
                  sHTML += '"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span>'+response.agencies_list[i].score+'</div>';
                }
              }
            sHTML += '</div>';
          }
          if (iAgenciesPage == 1)
          {
            agenciesList.innerHTML = sHTML;
          }
          else
          {
            agenciesList.insertAdjacentHTML('beforeend',sHTML);
          }
          iAgenciesPage++;

          //enable load-more
          if (loadMore)
          {
            if (loadMore.className.indexOf('hidden') !== -1)
            {
              loadMore.className = loadMore.className.replace(/\s*hidden/g,'');
            }
          }

          var filterResCount = document.getElementById('filter-result-count');
          if (filterResCount && typeof filterResCount != "undefined")
          {
            filterResCount.innerHTML = response.result_count;
          }

          var filterResWrap = document.getElementById('filter-result-wrapper');
          if (filterResWrap && typeof filterResWrap != "undefined")
          {
            if (filterResWrap.className.indexOf('hidden') !== -1)
            {
              filterResWrap.className = filterResWrap.className.replace(/\s*hidden/g,'');
            }
          }
        }
        else
        {
          if (iAgenciesPage == 1)
          {
            sHTML = '<div id="no-search-results">';
              sHTML += '<div class="title">Sorry, no agency matched your search...</div>';
              sHTML += '<div class="content">';
                sHTML += 'Please try to broaden your search criteria.';
                if (!bOnlyAgenciesOfTheMonth)
                {
                  sHTML += '<br>Do you know an agency that can fit here? Help us complete our database!<br>';
                  sHTML += '<a href="'+response.add_agency_url+'" class="button">Add a new agency</a>';
                }
              sHTML += '</div>';
            sHTML += '</div>';
            agenciesList.innerHTML = sHTML;

            var filterResWrap = document.getElementById('filter-result-wrapper');
            if (filterResWrap && typeof filterResWrap != "undefined")
            {
              if (filterResWrap.className.indexOf('hidden') === -1)
              {
                filterResWrap.className += ' hidden';
              }
            }
          }
          //disable load-more
          if (loadMore)
          {
            if (loadMore.className.indexOf('hidden') === -1)
            {
              loadMore.className += ' hidden';
            }
          }
        }

        if (response.agencies_month && response.agencies_month_mob && arAgenciesOfTheMonth && arAgenciesOfTheMonth.length > 0)
        {
          /*
          var sHTML = '';
          for (var i=0; i<response.agencies_month.length; i++)
          {
            sHTML += '<div class="featured-item">';
              sHTML += '<a href="'+response.agencies_month[i].view_url+'">';
                sHTML += '<div class="featured-img grow">';
                  sHTML += '<div class="featured-logo">';
                    sHTML += '<img src="'+response.agencies_month[i].logo+'" align="top" alt="'+response.agencies_month[i].name+'"></img>';
                  sHTML += '</div>';
                  sHTML += '<div class="featured-score '+response.agencies_month[i].badge+'">'+response.agencies_month[i].score+'</div>';
                sHTML += '</div>';
                sHTML += response.agencies_month[i].name;
              sHTML += '</a>';
            sHTML += '</div>';
          }
          */

          for (var i=0; i<arAgenciesOfTheMonth.length; i++)
          {
            if (arAgenciesOfTheMonth[i].parentNode.className.indexOf('mobile-featured-agencies') !== -1)
              arAgenciesOfTheMonth[i].innerHTML = response.agencies_month_mob;
            else
              arAgenciesOfTheMonth[i].innerHTML = response.agencies_month;
          }
        }
        else if (arAgenciesOfTheMonth && arAgenciesOfTheMonth.length > 0)
        {
          //clear result list
          for (var i=0; i<arAgenciesOfTheMonth.length; i++)
          {
            arAgenciesOfTheMonth[i].innerHTML = '';
          }
        }
        //console.log('***** SEARCH AGENCIES SCROLL *****');
        handlerScrollWidget();
      }
      toggleLoadingMask(false);
    },
    error: function(jqXHR, exception) {
      //console.log(jqXHR);
      //console.log(exception);
      if (jqXHR.status === 0) {
          alert('Not connect.\n Verify Network.');
      } else if (jqXHR.status == 404) {
          alert('Requested page not found. [404]');
      } else if (jqXHR.status == 500) {
          alert('Internal Server Error [500].');
      } else if (exception === 'parsererror') {
          alert('Requested JSON parse failed.');
      } else if (exception === 'timeout') {
          alert('Time out error.');
      } else if (exception === 'abort') {
          alert('Ajax request aborted.');
      } else {
          alert('Uncaught Error.\n' + jqXHR.responseText);
      }
      toggleLoadingMask(false);
    }
  })
}

function validateAgencyField(iStep, curField, arrayItemId, bIsImage, iAgencyId, iProjectId, imgElemId, imgNameElemId, sImgPrefix, callback)
{
  var formData, processData, contentType, imgElem, elemLoading;
  elemLoading = null;
  if (bIsImage)
  {
    //check if HTML5 ajax upload is supported
    if (typeof window.FormData === 'undefined') { return; }
    formData = new FormData();
    formData.append('validate_only', true); //just process ajax validation, withou any action like adding to DB or sending emails
    formData.append('agency_id', iAgencyId);
    formData.append('project_id',iProjectId);
    formData.append('step', iStep);
    formData.append('action', 'agency_validate_field');
    formData.append('itemId', arrayItemId);
    formData.append('is_img', true);
    formData.append('img_prefix', sImgPrefix);
    formData.append('name', curField.getAttribute("name"));
    formData.append(curField.getAttribute("name"), curField.files[0]);
    //formData.append(curField.getAttribute("name"), '');
    processData = false; // tell jQuery not to process the data
    contentType = false; // tell jQuery not to set contentType
    imgElem = document.getElementById(imgElemId);
    if (imgElem && typeof imgElem != "undefined")
    {
      elemLoading = getChild(imgElem.parentNode,'loading');
      if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
      {
        elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
      }
    }
  }
  else
  {
    formData = {};
    formData['validate_only'] = true; //just process ajax validation, withou any action like adding to DB or sending emails
    formData['agency_id' ] = iAgencyId;
    formData['project_id'] = iProjectId;
    formData['step'] = iStep;
    formData['action'] = 'agency_validate_field';
    formData['itemId'] = arrayItemId;
    formData['name'] = curField.getAttribute("name");
    formData[arrayItemId] = curField.value;
    //console.log(formData);
    //formData = JSON.stringify(formData);
    //console.log(formData);

    processData = true;
    contentType = 'application/x-www-form-urlencoded';
  }

  jQuery.ajax({
    type : "post",
    dataType: 'json',  // what to expect back from the PHP script, if anything
    data : formData,
    cache: false,
    processData: processData,
    contentType: contentType,
    url : sAjaxURL,
    success: function(response)
    {
      if (response && response.type)
      {
        if (response.type == "success")
        {
          toggleErrorField(curField,false);
          if (bIsImage)
          {
            //console.log(imgElemId);
            //imgElem = document.getElementById(imgElemId);
            //if (imgElem && typeof imgElem != "undefined" && response.image_path)
            if (response.image_path)
            {
              var timeStamp = Math.floor(Date.now() / 1000);
              imgElem.src = response.image_path+'?'+timeStamp;
              if (imgElem.parentNode.className.indexOf('hidden') !== -1)
              {
                imgElem.parentNode.className = imgElem.parentNode.className.replace(/\s*hidden/g,'');
              }

              //clear the old FILE so it's not submitted again
              var $curField = jQuery('#'+curField.id);
              $curField.wrap('<form>').closest('form').get(0).reset();
              $curField.unwrap();
            }
            imgNameElem = document.getElementById(imgNameElemId);
            if (imgNameElem && typeof imgNameElem != "undefined" && response.image_name)
            {
              imgNameElem.value = response.image_name;
            }
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
          }

          if (callback) {
            callback(curField.value);
          }
        }
        else if (response.type == "failure")
        {
          var msgError = getSibling(curField, 'msg-error', true);
          if (msgError && response.error)
          {
            msgError.innerHTML = response.error;
          }
          if (bIsImage)
          {
            //clear the old FILE so it's not submitted again
            var $curField = jQuery('#'+curField.id);
            $curField.wrap('<form>').closest('form').get(0).reset();
            $curField.unwrap();
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
          }
          toggleErrorField(curField,true);
        }
      }
      else
      {
        console.log('Error trying to validate field. Check response.');
      }
    },
    error: function(jqXHR, exception) {
      //console.log(jqXHR);
      //console.log(exception);
      if (jqXHR.status === 0) {
          console.log('Not connect.\n Verify Network.');
      } else if (jqXHR.status == 404) {
          console.log('Requested page not found. [404]');
      } else if (jqXHR.status == 500) {
          console.log('Internal Server Error [500].');
      } else if (exception === 'parsererror') {
          console.log('Requested JSON parse failed.');
      } else if (exception === 'timeout') {
          console.log('Time out error.');
      } else if (exception === 'abort') {
          console.log('Ajax request aborted.');
      } else {
          console.log('Uncaught Error.\n' + jqXHR.responseText);
      }
    }
  });
}

//GOOGLE PLACES SEARCH
var arAutoComplete = new Array();
function initAutoComplete(index,elemAutoCompleteId)
{
  // Create the autocomplete object, restricting the search to geographical location types.
  var elemAutoComplete = document.getElementById(elemAutoCompleteId);
  if (!elemAutoComplete || typeof elemAutoComplete == "undefined") { return; }

  arAutoComplete[index] = new google.maps.places.Autocomplete(elemAutoComplete,{types: ['address']});
  // When the user selects an address from the dropdown, populate the address fields in the form.
  arAutoComplete[index].addListener('place_changed', function(){
    //console.log('index: '+index+', elemAutoCompleteId:'+elemAutoCompleteId);
    fillAddress(index);
  });
}

function fillAddress(index)
{
  var componentForm = {
    locality: 'long_name',
    postal_town: 'long_name',
    sublocality_level_1: 'long_name',
    administrative_area_level_1: 'short_name',
    country: 'long_name',
    postal_code: 'short_name'
  };

  var place = arAutoComplete[index].getPlace();
  var sCountry = '';
  var sCity    = '';
  var sCity2   = '';
  var sAddress = '';

  var sStreetNum  = '';
  var sStreetName = '';
  var sPostCode   = '';
  //console.log(place.address_components);

  // Get each component of the address from the place details
  // and fill the corresponding field on the form.
  for (var i = 0; i < place.address_components.length; i++)
  {
    var addressType = place.address_components[i].types[0];
    switch(addressType)
    {
      case 'street_number': sStreetNum  = place.address_components[i]['short_name']; break;
      case 'route'        : sStreetName = place.address_components[i]['long_name']; break;
      case 'locality'     : sCity = place.address_components[i]['long_name']; break;
      case 'postal_town'  : sCity = place.address_components[i]['long_name']; break;
      case 'sublocality_level_1': sCity2 = place.address_components[i]['long_name']; break;
      case 'country'      : sCountry = place.address_components[i]['long_name']; break;
      case 'postal_code'  : sPostCode = place.address_components[i]['long_name']; break;
    }
  }

  sAddress = sStreetName;
  if (sStreetNum != '') { sAddress += ' '+sStreetNum; }
  if (sPostCode != '') { sAddress += ', '+sPostCode; }

  var elem;
  elem = document.getElementById('localization_'+index+'_country_name');
  if (elem && typeof elem != "undefined") { elem.value = sCountry; }

  if (sCity == '' && sCity2 != '')
  {
    sCity = sCity2;
  }
  elem = document.getElementById('localization_'+index+'_city');
  if (elem && typeof elem != "undefined") { elem.value = sCity; }

  elem = document.getElementById('localization_'+index+'_address');
  if (elem && typeof elem != "undefined") { elem.value = sAddress; }
}

function toggleAddress(elem,targetElemId,sTargetClass)
{
  var targetElem = document.getElementById(targetElemId);
  if (!elem || typeof elem == "undefined" || !targetElem || typeof targetElem == "undefined" || !elem.checked) { return; }

  var arTmp = targetElem.parentNode.getElementsByClassName(sTargetClass);
  if (arTmp && typeof arTmp.length != "undefined" && arTmp.length>0 )
  {
    for (var i=0; i<arTmp.length; i++)
    {
      if (arTmp[i].className.indexOf('hidden') === -1)
      {
        arTmp[i].className += ' hidden';
      }
    }
    if (targetElem.className.indexOf('hidden') !== -1)
    {
      targetElem.className = targetElem.className.replace(/\s*hidden/g,'');
    }
  }
}

function loadReviews(loadMoreElem)
{
  if (!idAgency || typeof idAgency == "undefined"
      || !iReviewsPage || typeof iReviewsPage == "undefined"
      || !iReviewsLimit || typeof iReviewsLimit == "undefined"
      || !sReviewsSort || typeof sReviewsSort == "undefined")
  {
    console.log('insufficient data to load reviews');
    return;
  }
  var elemLoading = null;
  if (loadMoreElem)
  {
    if (loadMoreElem && loadMoreElem.className.indexOf('hidden') === -1)
    {
      loadMoreElem.className += ' hidden';
    }
    elemLoading = getChild(loadMoreElem.parentNode,'loading');
    if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
    {
      elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
    }
  }
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'load_reviews', agency_id:idAgency, page:iReviewsPage, limit:iReviewsLimit, sort: sReviewsSort},
    success: function(response)
    {
      if (response)
      {
        //console.log(response);
        if (response.type == "success")
        {
          if (response.reviews_list)
          {
            if (loadMoreElem && loadMoreElem.className.indexOf('hidden') !== -1)
            {
              loadMoreElem.className = loadMoreElem.className.replace(/\s*hidden/g,'');
            }
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
            iReviewsPage++;
            var sHTML = '';
            for (var key in response.reviews_list)
            {
              if (response.reviews_list.hasOwnProperty(key))
              {
                if (key == 'user_meta') continue;

                if (!response.user_id || (response.user_id != response.reviews_list[key].user_created))
                {
                  sHTML += '<div id="report-review-'+response.reviews_list[key].id+'" class="cell-section cell-reviews cell-report hidden">';
                  if (!response.user_id)
                  {
                    sHTML += '<div class="form-section">You need to be logged in order to add a review.<br>';
                    sHTML += '<div class="button-wrapper"><a href="'+response.login_url+'" class="button">Log in</a></div></div>';
                  }
                  else
                  {
                    sHTML += '<form action="'+response.agency_url+'#review-form" method="post" class="form-styled">';
                      sHTML += '<input type="hidden" name="action" value="report-review">';
                      sHTML += '<input type="hidden" name="review_id" value="'+response.reviews_list[key].id+'">';
                      sHTML += '<input type="hidden" name="agency_id" value="'+response.agency_id+'">';
                      sHTML += '<div class="form-section">';
                        sHTML += '<a class="cell-title">Report review</a>';
                        sHTML += '<a class="close-btn" onClick="toggleHidden(\'report-review-'+response.reviews_list[key].id+'\')"><img src="'+sImagePath+'/images/ico_close.png" align="top"></a>';
                      sHTML += '</div>';
                      sHTML += '<div class="form-section">';
                        sHTML += '<textarea name="content" placeholder="Write your explanation"></textarea>';
                        sHTML += '<div class="button-wrapper">';
                          sHTML += '<input type="submit" name="add-report" value="Send report">';
                        sHTML += '</div>';
                      sHTML += '</div>';
                    sHTML += '</form>';
                  }
                  sHTML += '</div>';
                }

                sHTML += '<div id="review-'+response.reviews_list[key].id+'" class="cell-section cell-reviews cell-item">';
                  sHTML += '<div class="form-section">';
                    sHTML += '<div class="column-wrapper">';
                      sHTML += '<div class="cell-title">'+response.reviews_list[key].title+'</div>';
                      sHTML += '<div class="action-buttons">';
                        if (response.user_id && (response.user_id == response.reviews_list[key].user_created))
                        {
                          sHTML += '<a href="'+response.agency_url+'?edit-review=1#review-'+response.reviews_list[key].id+'" class="button review-edit" title="Edit review"></a>';
                        }
                        sHTML += '<a onClick="toggleHidden(\'replies-'+response.reviews_list[key].id+'\',true)" class="button review-reply" title="Reply to this review"></a>';
                        if (response.user_id && (response.user_id != response.reviews_list[key].user_created))
                        {
                          sHTML += '<a onClick="toggleHidden(\'report-review-'+response.reviews_list[key].id+'\',true)" class="button review-report" title="Report this review"></a>';
                        }
                        if (response.is_moderator)
                        {
                          sHTML += '<div class="button-wrapper review-delete">';
                            sHTML += '<form method="POST">';
                              sHTML += '<input type="hidden" name="action" value="delete-review">';
                              sHTML += '<input type="hidden" name="review_id" value="'+response.reviews_list[key].id+'">';
                              sHTML += '<input type="hidden" name="agency_id" value="'+response.agency_id+'">';
                              sHTML += '<button type="submit" name="delete-review" value="1">delete</button>';
                            sHTML += '</form>';
                          sHTML += '</div>';
                        }
                      sHTML += '</div>';
                    sHTML += '</div>';
                    sHTML += '<div class="review-date">'+response.reviews_list[key].date_formatted+'</div>';
                    sHTML += '<table><tr>';
                      sHTML += '<td class="user-pic"><img src="'+response.reviews_list[key].user_pic+'" align="top"><div class="impression impression_'+response.reviews_list[key].impression+'"></div></td>';
                      sHTML += '<td class="user-details">';
                        var iTmpUserId = response.reviews_list[key].user_created;
                        var sTmpName = '-';
                        var sTmpCompany = '-';
                        var sTmpPosition = '-';
                        var sTmpCity = '-';
                        if (response.reviews_list['user_meta'][iTmpUserId].first_name)
                          sTmpName = response.reviews_list['user_meta'][iTmpUserId].first_name;
                        if (response.reviews_list['user_meta'][iTmpUserId].last_name)
                        {
                          if (sTmpName != '-') sTmpName += ' ';
                          sTmpName += response.reviews_list['user_meta'][iTmpUserId].last_name;
                        }
                        if (response.reviews_list['user_meta'][iTmpUserId].company)
                          sTmpCompany = response.reviews_list['user_meta'][iTmpUserId].company;
                        if (response.reviews_list['user_meta'][iTmpUserId].position)
                          sTmpPosition = response.reviews_list['user_meta'][iTmpUserId].position;
                        if (response.reviews_list['user_meta'][iTmpUserId].city)
                          sTmpCity = response.reviews_list['user_meta'][iTmpUserId].city;
                        sHTML += '<table><tr>';
                          sHTML += '<td class="user-name">'+sTmpName+'</td>';
                          sHTML += '<td class="user-position">'+sTmpPosition+'</td>';
                        sHTML += '</tr><tr>';
                          sHTML += '<td class="user-company">'+sTmpCompany+'</td>';
                          sHTML += '<td class="user-city">'+sTmpCity+'</td>';
                        sHTML += '</tr></table>';
                      sHTML += '</td>';
                    sHTML += '</tr></table>';
                    if (response.reviews_list[key].content)
                    {
                      var iTmpLimitChars = 200;
                      sHTML += '<div class="review-content">';
                      if (response.reviews_list[key].content.length > iTmpLimitChars)
                      {
                        sHTML += response.reviews_list[key].content.substr(0,iTmpLimitChars);
                        sHTML += '<a class="read-more" onClick="showMore(this)"> Read more...</a>';
                        sHTML += '<span class="hidden">'+response.reviews_list[key].content.substr(iTmpLimitChars)+'</span>';
                      }
                      else
                        sHTML += response.reviews_list[key].content;
                      sHTML += '</div>';
                    }
                    if (response.reviews_list[key].service)
                    {
                      sHTML += '<div class="rate-row">';
                        sHTML += '<div class="column-wrapper">';
                          sHTML += '<div class="col-left">Client service</div>';
                          sHTML += '<div class="col-right">'+response.reviews_list[key].service+'/10</div>';
                        sHTML += '</div>';
                        sHTML += '<div class="rate-indicator"><div class="rate-selected" style="width:'+(response.reviews_list[key].service*10)+'%"></div></div>';
                      sHTML += '</div>';
                    }
                    if (response.reviews_list[key].creativity)
                    {
                      sHTML += '<div class="rate-row">';
                        sHTML += '<div class="column-wrapper">';
                          sHTML += '<div class="col-left">Creativity</div>';
                          sHTML += '<div class="col-right">'+response.reviews_list[key].creativity+'/10</div>';
                        sHTML += '</div>';
                        sHTML += '<div class="rate-indicator"><div class="rate-selected" style="width:'+(response.reviews_list[key].creativity*10)+'%"></div></div>';
                      sHTML += '</div>';
                    }
                    if (response.reviews_list[key].effectiveness)
                    {
                      sHTML += '<div class="rate-row">';
                        sHTML += '<div class="column-wrapper">';
                          sHTML += '<div class="col-left">Effectiveness</div>';
                          sHTML += '<div class="col-right">'+response.reviews_list[key].effectiveness+'/10</div>';
                        sHTML += '</div>';
                        sHTML += '<div class="rate-indicator"><div class="rate-selected" style="width:'+(response.reviews_list[key].effectiveness*10)+'%"></div></div>';
                      sHTML += '</div>';
                    }
                    if (response.reviews_list[key].quality)
                    {
                      sHTML += '<div class="rate-row">';
                        sHTML += '<div class="column-wrapper">';
                          sHTML += '<div class="col-left">Quality of work</div>';
                          sHTML += '<div class="col-right">'+response.reviews_list[key].quality+'/10</div>';
                        sHTML += '</div>';
                        sHTML += '<div class="rate-indicator"><div class="rate-selected" style="width:'+(response.reviews_list[key].quality*10)+'%"></div></div>';
                      sHTML += '</div>';
                    }
                    if (response.reviews_list[key].value_for_money)
                    {
                      sHTML += '<div class="rate-row">';
                        sHTML += '<div class="column-wrapper">';
                          sHTML += '<div class="col-left">Value for money</div>';
                          sHTML += '<div class="col-right">'+response.reviews_list[key].value_for_money+'/10</div>';
                        sHTML += '</div>';
                        sHTML += '<div class="rate-indicator"><div class="rate-selected" style="width:'+(response.reviews_list[key].value_for_money*10)+'%"></div></div>';
                      sHTML += '</div>';
                    }
                  sHTML += '</div>';
                  if (response.reviews_list[key].replies_cnt)
                  {
                    sHTML += '<div class="has-replies"><a onClick="toggleReplies(this, \'replies-'+response.reviews_list[key].id+'\','+response.reviews_list[key].id+',1,1,'+response.reviews_list[key].replies_cnt+')"><img src="'+response.replies_img+'" align="top"> '+response.reviews_list[key].replies_cnt+((response.reviews_list[key].replies_cnt > 1) ? ' Replies' : ' Reply')+'</a></div>';
                  }
                  sHTML += '<div id="replies-'+response.reviews_list[key].id+'" class="form-section review-replies hidden">';
                    sHTML += '<div class="replies-list"><div class="loading centered"><!-- LOADER START--><div class="loader"></div><!-- LOADER END--></div></div>';
                  if (!response.user_id)
                  {
                    sHTML += 'You need to be logged in order to add a review.<br>';
                    sHTML += '<div class="button-wrapper"><a href="'+response.login_url+'" class="button">Log in</a></div>';
                  }
                  else
                  {
                    sHTML += '<table class="reply-form"><tr>';
                      sHTML += '<td class="user-pic"><img src="'+response.user_pic+'" align="top"></td>';
                      sHTML += '<td class="user-reply">';
                        sHTML += '<textarea type="text" name="reply" value="" placeholder="Write a reply..." onKeyDown="sendReviewReply(event,this,'+response.reviews_list[key].id+')"></textarea>';
                        sHTML += '<div class="loading hidden"><!-- LOADER START--><div class="loader"></div><!-- LOADER END--></div>';
                        sHTML += '<div class="msg-error hidden">Something went wrong. Couldn\'t add reply at this time.</div>';
                      sHTML += '</td>';
                    sHTML += '</tr></table>';
                  }
                  sHTML += '</div>';
                sHTML += '</div>';
              }
            }
            var cellReviews = document.getElementById('cell-reviews-items');
            cellReviews.insertAdjacentHTML('beforeend', sHTML);
          }
          else
          {
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
          }
        }
        else
        {
          if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
          {
            elemLoading.className += ' hidden';
          }
        }
      }
    },
    error: handleAjaxErr
  });
}

function loadUserReviews(loadMoreElem, idUser, iReviewsPage,iReviewsLimit, sReviewsSort)
{
  if (!idUser || typeof idUser == "undefined"
      || !iReviewsPage || typeof iReviewsPage == "undefined"
      || !iReviewsLimit || typeof iReviewsLimit == "undefined"
      || typeof sReviewsSort == "undefined")
  {
    console.log('insufficient data to load user reviews');
    return;
  }
  var elemLoading = null;
  if (loadMoreElem)
  {
    if (loadMoreElem && loadMoreElem.className.indexOf('hidden') === -1)
    {
      loadMoreElem.className += ' hidden';
    }
    elemLoading = getChild(loadMoreElem.parentNode,'loading');
    if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
    {
      elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
    }
  }
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'load_user_reviews', user_id:idUser, page:iReviewsPage, limit:iReviewsLimit, sort: sReviewsSort},
    success: function(response)
    {
      if (response)
      {
        //console.log(response);
        if (loadMoreElem)
        {
          loadMoreElem.parentNode.parentNode.removeChild(loadMoreElem.parentNode);
        }
        if (response.type == "success")
        {
          if (response.html)
          {
            var cellReviews = document.getElementById('reviews');
            cellReviews.insertAdjacentHTML('beforeend', response.html);
          }
        }
      }
    },
    error: handleAjaxErr
  });
}

function sendReviewReply(e, elem, idReview)
{
  if (!elem || typeof elem == "undefined") { return; }
  if(e.which == 13 || e.keyCode == 13)
  {
    if(e.shiftKey)
    {
      //on shift+enter insert new line
      return;
    }
  }
  else
    return;

  //show loader
  if (elem.className.indexOf('hidden') === -1)
  {
    elem.className += 'hidden';
  }
  var elemLoading = getChild(elem.parentNode,'loading');
  if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
  {
    elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
  }

  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'add_review_reply', value:elem.value, review_id:idReview},
    success: function(response)
    {
      if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
      {
        elemLoading.className += ' hidden';
      }
      if (elem.className.indexOf('hidden') !== -1)
      {
        elem.className = elem.className.replace(/\s*hidden/g,'');
      }
      var elemMsg = getChild(elem.parentNode,'msg-error');

      if (response)
      {
        if (response.type == "success")
        {
          if (elemMsg && elemMsg.className.indexOf('hidden') === -1)
          {
            elemMsg.className += ' hidden';
          }
          elem.value = '';
          var sHTML = '<table class="reply-item"><tr>';
          sHTML += '<td class="user-pic"><img src="'+response.user_image+'" align="top"></td>';
          sHTML += '<td class="user-reply"><b>'+response.user_name+'</b> '+response.user_reply+'<div class="reply-date">'+response.reply_date+'</div></td>';
          sHTML += '</tr></table>';
          var replySection = getChild(getParent(elem,'review-replies'),'replies-list');
          if (replySection)
            replySection.insertAdjacentHTML('beforeend', sHTML);
        }
        else
        {
          if (elemMsg && elemMsg.className.indexOf('hidden') !== -1)
          {
            elemMsg.className = elemMsg.className.replace(/\s*hidden/g,'');
          }
        }
      }
    },
    error: handleAjaxErr
  });
}

function loadRepliesList(elem, containerId, idReview, iPage, iLimit, iTotalCount)
{
  var container = document.getElementById(containerId);
  if (!container || typeof container == "undefined") { return; }
  var repliesList = getChild(container,'replies-list');
  if (!repliesList || typeof repliesList == "undefined") { return; }
  //show loader
  var elemLoading = getChild(repliesList,'loading');
  if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
  {
    elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
  }
  if (elem) { elem.parentNode.removeChild(elem); }
  if (parseInt(iPage) < 0) { iPage = 1; }
  if (parseInt(iLimit) < 0) { iLimit = 10; }

  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'load_replies', review_id:idReview, page:iPage, limit:iLimit},
    success: function(response)
    {
      if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
      {
        elemLoading.className += ' hidden';
      }

      if (response)
      {
        if (response.type == "success")
        {
          var sHTML = '';
          if ((iPage * iLimit) < iTotalCount)
          {
            sHTML += '<a onClick="loadRepliesList(this,\''+containerId+'\','+idReview+','+(iPage+1)+','+iLimit+','+iTotalCount+')">load previous...</a>';
            sHTML += elemLoading.outerHTML;
            elemLoading.parentNode.removeChild(elemLoading);
          }
          for (var key in response.replies_list)
          {
            if (response.replies_list.hasOwnProperty(key))
            {
              sHTML += '<table class="reply-item"><tr>';
              sHTML += '<td class="user-pic"><img src="'+response.replies_list[key].user_image+'" align="top"></td>';
              sHTML += '<td class="user-reply"><b>'+response.replies_list[key].user_name+'</b> '+response.replies_list[key].user_reply+'<div class="reply-date">'+response.replies_list[key].reply_date+'</div></td>';
              sHTML += '</tr></table>';
            }
          }
          if (repliesList && (sHTML != ''))
            repliesList.insertAdjacentHTML('afterbegin', sHTML);
        }
      }
    },
    error: handleAjaxErr
  });
}

function initRepliesList(containerId, idReview, iPage, iLimit, iTotalCount)
{
  //you can init only once
  var container = document.getElementById(containerId);
  if (!container || typeof container == "undefined") { return; }
  var repliesList = getChild(container,'replies-list');
  if (!repliesList || typeof repliesList == "undefined") { return; }
  //check if at least one item is loaded
  var replyItem = getChild(repliesList,'reply-item');
  if (replyItem) { return; }

  loadRepliesList(null, containerId, idReview, iPage, iLimit, iTotalCount);
}

function showReplies(elem, replyId, reviewId, iPage, iLimit, iRepliesCnt)
{
  if (elem.parentNode && elem.parentNode.className.indexOf('open') === -1)
  {
    toggleReplies(elem, replyId, reviewId, iPage, iLimit, iRepliesCnt);
  }
  else
  {
    elem.parentNode.className += ' open';
    toggleHidden(replyId,true);
  }
}

function toggleReplies(elem, replyId, reviewId, iPage, iLimit, iRepliesCnt)
{
  if (!elem || typeof elem == "undefined") return;
  if (elem.parentNode && elem.parentNode.className.indexOf('open') === -1)
  {
    elem.parentNode.className += ' open';
    initRepliesList(replyId,reviewId,iPage,iLimit,iRepliesCnt);
  }
  else
  {
    elem.parentNode.className = elem.parentNode.className.replace(/\s*open/g,'');
  }
  toggleHidden(replyId);
};

/*
function sendReviewReport(form)
{
  //always return false, so the form is not submitted
  if (!form || typeof form == "undefined") { return false; }
  var formData = {};
  for (var i=0; i<form.elements.length; i++)
  {
    formData[form.elements[i].getAttribute("name")] = form.elements[i].value;
  }
  formData['action'] = 'add_review_report';

  //show loader
  if (form.className.indexOf('hidden') === -1)
  {
    form.className += 'hidden';
  }
  var elemLoading = getChild(form.parentNode,'loading');
  if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
  {
    elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
  }

  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : formData,
    success: function(response)
    {
      if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
      {
        elemLoading.className += ' hidden';
      }
      if (form.className.indexOf('hidden') !== -1)
      {
        form.className = form.className.replace(/\s*hidden/g,'');
      }
      var elemMsg = getChild(form.parentNode,'msg-error');

      if (response)
      {
        if (response.type == "success")
        {
          if (elemMsg && elemMsg.className.indexOf('hidden') === -1)
          {
            elemMsg.className += ' hidden';
          }
          toggleHidden(form.parentNode.id);
        }
        else
        {
          if (elemMsg && elemMsg.className.indexOf('hidden') !== -1)
          {
            elemMsg.className = elemMsg.className.replace(/\s*hidden/g,'');
          }
        }
      }
    },
    error: handleAjaxErr
  });
}
*/
function updateShortlistChecks(chckElem)
{
  if (!chckElem || typeof chckElem == "undefined") { return; }

  var otherChckElemId = '';
  if (chckElem.id.indexOf('_mob') !== -1)
  {
    otherChckElemId = chckElem.id.replace(/\s*_mob/g,'');
  }
  else
  {
    otherChckElemId += chckElem.id+'_mob';
  }
  var otherChckElem = document.getElementById(otherChckElemId);
  if (!otherChckElem || typeof otherChckElem == "undefined") { return; }
  otherChckElem.checked = chckElem.checked;
}

var lastScrollTop = 0;
function handlerScrollWidget()
{
  var header = document.getElementById('header');
  var footer = document.getElementById('footer');
  var scrollSidebar = document.getElementById('scroll-sidebar');
  var sidebarContent = getChild(scrollSidebar,'content-wrapper');

  if (!header || typeof(header) == "undefined"
      || !footer || typeof(footer) == "undefined"
      || !scrollSidebar || typeof(scrollSidebar) == "undefined"
      || !sidebarContent || typeof(sidebarContent) == "undefined")
  {
    //console.log('elements undifined');
    return;
  }
  //console.log(scrollSidebar.getBoundingClientRect());

  var iScrollTopBreakPoint = header.clientHeight; //height of header
  var sidebarRect = sidebarContent.getBoundingClientRect();
  var st = window.pageYOffset || document.documentElement.scrollTop;
  var rect = footer.getBoundingClientRect(); //footer rect
  //console.log('FOOTER: ');
  //console.log(rect);
  //console.log('SIDEBAR: ');
  //console.log(sidebarRect);
  //console.log('scroll, st: '+st+', lastScrollTop: '+lastScrollTop+', iScrollBreakPoint: '+iScrollTopBreakPoint);
  if (st > lastScrollTop)
  {
    //down scroll
    if (lastScrollTop > iScrollTopBreakPoint)
    {
      if ((sidebarRect.bottom + 15) >= rect.y)
      {
        if (scrollSidebar.className.indexOf('sticky') != -1)
        {
          scrollSidebar.className = scrollSidebar.className.replace(/\s?sticky/g,'');
        }
        if (scrollSidebar.className.indexOf('stick-to-bottom') == -1)
        {
          scrollSidebar.className += " stick-to-bottom";
        }
      }
      else
      {
        if (scrollSidebar.className.indexOf('sticky') == -1)
        {
          scrollSidebar.className += " sticky";
        }
      }
    }
  } else if (st < lastScrollTop){
    // upscroll code
    if (st <= iScrollTopBreakPoint)
    {
      if (scrollSidebar.className.indexOf('sticky') != -1)
      {
        scrollSidebar.className = scrollSidebar.className.replace(/\s?sticky/g,'');
      }
    }
    else if (sidebarRect.y > 10)
    {
      if (scrollSidebar.className.indexOf('stick-to-bottom') != -1)
      {
        scrollSidebar.className = scrollSidebar.className.replace(/\s?stick-to-bottom/g,'');
      }
      if (scrollSidebar.className.indexOf('sticky') == -1)
      {
        scrollSidebar.className += " sticky";
      }
    }
  }

  //scroll left banners
  var scrollBanner = document.getElementById('left-banner-wrapper');
  var filterForm   = document.getElementById('filter-form');
  /*
  console.log('FOOTER: ');
  console.log(rect);
  console.log('SIDEBAR: ');
  console.log(leftSidebarRect);
  console.log('scroll, st: '+st+', lastScrollTop: '+lastScrollTop+', iScrollBreakPoint: '+iScrollTopBreakPoint);
  */

  if (scrollBanner && typeof(scrollBanner) != "undefined" && filterForm && typeof(filterForm) != "undefined")
  {
    var leftSidebarRect = scrollBanner.getBoundingClientRect();
    iScrollTopBreakPoint = header.clientHeight + filterForm.clientHeight;
    if (st > lastScrollTop)
    {
      //console.log('a');
      //console.log('scroll, st: '+st+', lastScrollTop: '+lastScrollTop+', iScrollBreakPoint: '+iScrollTopBreakPoint);
      //down scroll
      if (lastScrollTop > iScrollTopBreakPoint)
      {
        if ((leftSidebarRect.bottom) + 10 >= rect.y)
        {
          if (scrollBanner.parentNode.className.indexOf('sticky') != -1)
          {
            scrollBanner.parentNode.className = scrollBanner.parentNode.className.replace(/\s?sticky/g,'');
          }
          if (scrollBanner.parentNode.className.indexOf('stick-to-bottom') == -1)
          {
            scrollBanner.parentNode.className += " stick-to-bottom";
          }
        }
        else
        {
          if (scrollBanner.parentNode.className.indexOf('sticky') == -1)
          {
            scrollBanner.parentNode.className += " sticky";
          }
        }
      }
    }
    else if (st < lastScrollTop)
    {
      //console.log('b');
      //console.log('scroll, st: '+st+', lastScrollTop: '+lastScrollTop+', iScrollBreakPoint: '+iScrollTopBreakPoint);
      // upscroll code
      if (st <= iScrollTopBreakPoint)
      {
        if (scrollBanner.parentNode.className.indexOf('sticky') != -1)
        {
          scrollBanner.parentNode.className = scrollBanner.parentNode.className.replace(/\s?sticky/g,'');
        }
      }
      else if (leftSidebarRect.y > 10)
      {
        if (scrollBanner.parentNode.className.indexOf('stick-to-bottom') != -1)
        {
          scrollBanner.parentNode.className = scrollBanner.parentNode.className.replace(/\s?stick-to-bottom/g,'');
        }
        if (scrollBanner.parentNode.className.indexOf('sticky') == -1)
        {
          scrollBanner.parentNode.className += " sticky";
        }
      }
    }
    else if (st <= iScrollTopBreakPoint)
    {
      //console.log('c')
      //console.log('scroll, st: '+st+', lastScrollTop: '+lastScrollTop+', iScrollBreakPoint: '+iScrollTopBreakPoint);
      if (scrollBanner.parentNode.className.indexOf('sticky') != -1)
      {
        scrollBanner.parentNode.className = scrollBanner.parentNode.className.replace(/\s?sticky/g,'');
      }
      if (scrollBanner.parentNode.className.indexOf('stick-to-bottom') != -1)
      {
        scrollBanner.parentNode.className = scrollBanner.parentNode.className.replace(/\s?stick-to-bottom/g,'');
      }
    }
  }

  lastScrollTop = st;
}

function loadUserNotifications(loadMoreElem, iNotifPage, iNotifLimit)
{
  if (!iNotifPage || typeof iNotifPage == "undefined"
      || !iNotifLimit || typeof iNotifLimit == "undefined")
  {
    console.log('insufficient data to load user notifications');
    return;
  }
  var elemLoading = null;
  if (loadMoreElem)
  {
    if (loadMoreElem && loadMoreElem.className.indexOf('hidden') === -1)
    {
      loadMoreElem.className += ' hidden';
    }
    elemLoading = getChild(loadMoreElem.parentNode,'loading');
    if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
    {
      elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
    }
  }
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'load_user_notifications', notif_page:iNotifPage, notif_limit:iNotifLimit},
    success: function(response)
    {
      if (response)
      {
        //console.log(response);
        if (loadMoreElem)
        {
          loadMoreElem.parentNode.parentNode.removeChild(loadMoreElem.parentNode);
        }
        if (response.type == "success")
        {
          if (response.html)
          {
            var cellNotifications = document.getElementById('notifications');
            cellNotifications.insertAdjacentHTML('beforeend', response.html);
          }
        }
      }
    },
    error: handleAjaxErr
  });
}

function updateCampaignCalculator(iQuantity, iUnit, iPricePerThousand)
{
  if (iPricePerThousand == 0) { return };

  var qtyElem = document.getElementById('campaign-calculator-qty');
  var priceElem = document.getElementById('campaign-calculator-price');
  if (!qtyElem || typeof qtyElem == "undefined" || !priceElem || typeof priceElem == "undefined") { return; }

  qtyElem.innerHTML = iQuantity * iUnit;
  priceElem.innerHTML = iQuantity * iUnit / 1000 * iPricePerThousand;
}

function selectMinMax(idQuestion, elem)
{
  var minElem = document.getElementById(idQuestion+'_min');
  var maxElem = document.getElementById(idQuestion+'_max');
  if (!elem || typeof elem == "undefined" || !minElem || typeof minElem == "undefined" || !maxElem || typeof maxElem == "undefined") { return; }

  if (elem.id == idQuestion+'_a_min')
  {
    if (elem.checked)
    {
      if (maxElem.className.indexOf('checked') !== -1)
      {
        maxElem.className = maxElem.className.replace(/\s*checked/g,'');
      }
      if (minElem.className.indexOf('checked') === -1)
      {
        minElem.className += ' checked';
      }
    }
    else
    {
      if (minElem.className.indexOf('checked') !== -1)
      {
        minElem.className = minElem.className.replace(/\s*checked/g,'');
      }
    }
  }
  else if (elem.id == idQuestion+'_a_max')
  {
    if (elem.checked)
    {
      if (minElem.className.indexOf('checked') !== -1)
      {
        minElem.className = minElem.className.replace(/\s*checked/g,'');
      }
      if (maxElem.className.indexOf('checked') === -1)
      {
        maxElem.className += ' checked';
      }
    }
    else
    {
      if (maxElem.className.indexOf('checked') !== -1)
      {
        maxElem.className = maxElem.className.replace(/\s*checked/g,'');
      }
    }
  }
  else
  {
    if (minElem.className.indexOf('checked') !== -1)
    {
      minElem.className = minElem.className.replace(/\s*checked/g,'');
    }
    if (maxElem.className.indexOf('checked') !== -1)
    {
      maxElem.className = maxElem.className.replace(/\s*checked/g,'');
    }
  }
}
function showFullTestResult(elem)
{
  if (!elem || typeof elem == "undefined") { return; }
  var rowElem = getParent(elem,'chem-test-row');
  if (!rowElem || typeof rowElem == "undefined") { return; }
  var answersElem = getChildInTree(rowElem,'chem-test-answers');
  showElement(answersElem);
  hideElementsByClass('show-details');
}
function hideFullTestResult(elem)
{
  if (!elem || typeof elem == "undefined") { return; }
  var rowElem = getParent(elem,'chem-test-row');
  if (!rowElem || typeof rowElem == "undefined") { return; }
  var answersElem = getChildInTree(rowElem,'chem-test-answers');
  hideElement(answersElem);
  showElementsByClass('show-details');
}
function showLoader(selector='#loader') {
	jQuery(selector).addClass('show');
}
function hideLoader(selector='#loader') {
	jQuery(selector).removeClass('show');
}

function loadBlogPosts(loadMoreElem)
{
  if (typeof sCategorySlug == "undefined"
      || !iBlogPage || typeof iBlogPage == "undefined"
      || !iBlogLimit || typeof iBlogLimit == "undefined"
      || typeof sBlogSort == "undefined")
  {
    console.log('insufficient data to load blog posts');
    return;
  }
  var elemLoading = null;
  if (loadMoreElem)
  {
    if (loadMoreElem && loadMoreElem.className.indexOf('hidden') === -1)
    {
      loadMoreElem.className += ' hidden';
    }
    elemLoading = getChildInTree(loadMoreElem.parentNode,'loading');

    if (elemLoading && elemLoading.className.indexOf('hidden') !== -1)
    {
      elemLoading.className = elemLoading.className.replace(/\s*hidden/g,'');
    }
  }
  jQuery.ajax({
    type : "post",
    dataType : "json",
    url : sAjaxURL,
    data : {action: 'load_blog_posts', cat_slug:sCategorySlug, page:iBlogPage, limit:iBlogLimit, sort: sBlogSort},
    success: function(response)
    {
      if (response)
      {
        //console.log(response);
        if (response.type == "success")
        {
          if (response.posts_list_html)
          {
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
            if (response.all_pages > 0)
            {
              if (loadMoreElem && loadMoreElem.className.indexOf('hidden') !== -1)
              {
                loadMoreElem.className = loadMoreElem.className.replace(/\s*hidden/g,'');
              }

              iBlogPage++;
              var blogPosts = document.getElementById('blog-posts');
              blogPosts.insertAdjacentHTML('beforeend', response.posts_list_html);
            }
          }
          else
          {
            if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
            {
              elemLoading.className += ' hidden';
            }
          }
        }
        else
        {
          if (elemLoading && elemLoading.className.indexOf('hidden') === -1)
          {
            elemLoading.className += ' hidden';
          }
        }
      }
    },
    error: handleAjaxErr
  });
}